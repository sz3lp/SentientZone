# /sz/src/state_machine.py

"""
Module: state_machine.py
Purpose: Track and enforce legal transitions between HVAC states.
Consumes:
- Requested hvac_state from decision_engine
Provides:
- safe_state_transition(requested_state) → final_state
Behavior:
- Prevents illegal jumps (e.g., COOL_ON → HEAT_ON instantly)
- Enforces idle buffer between opposing states
- Stores internal current_state (volatile)
"""

import time

# In-memory state (non-persistent)
_current_state = "OFF"
_last_transition_time = time.time()
_min_idle_time = 10  # seconds between mode reversals


def safe_state_transition(requested_state):
    """
    Ensures legal transitions between HVAC modes.
    Args:
        requested_state (str): Requested state from decision engine
    Returns:
        str: Final state to be executed
    """
    global _current_state, _last_transition_time

    now = time.time()
    opposing = {
        "HEAT_ON": "COOL_ON",
        "COOL_ON": "HEAT_ON"
    }

    # Require cooldown time between opposing modes
    if (requested_state != _current_state and
        opposing.get(requested_state) == _current_state and
        now - _last_transition_time < _min_idle_time):
        return "OFF"  # Enforce neutral idle state

    if requested_state != _current_state:
        _last_transition_time = now
        _current_state = requested_state

    return _current_state


def current_state():
    """
    Returns current internal state.
    """
    return _current_state
